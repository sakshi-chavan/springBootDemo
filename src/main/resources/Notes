Why we need API Documentation?

- Consumer should know what APIs are provided.
- Consumer should know what is URL of API.
- Consumer should know what to pass in request payload and what to expect in return.


What is Swagger?

- It is a tool for developers to have documentation of APIs.
- It automatically creates documentation for the APIs, hence less manual efforts for API documentation.
- We can consume the APIs using Swagger UI.
- Swagger doesn't only provide API documentation, it also provides a way that we can consume our APIs.
- The new name for swagger is : Open API Definition
  Below is the dependency to add the new Swagger UI which is Open API Definition.
	<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-ui</artifactId>
			<version>1.5.6</version>
	</dependency>
	
	
Logging in Spring Boot

- Logs are helpful to debug and troubleshoot the issue.
- Different levels for logging.
	Error < Warn < Info < Debug < Trace
- By default Spring Boot is having info logging level enabled.
- Different log levels for different packages and classes.
- Create log file which contains all logs for Spring Boot Application.


application.properties file configuration tips:

- properties file have key value pair 
- here we can store db properties like db url, db uname, db pass for db connection
- we can have our own properties as well. 
 eg. you can have your application name in your application.properties and throughout the properties you can read those properties in your project.

- in below app name notice that Demo App is a string but it doesn't required to be in quotation marks. where app.name/appName is your key.
	app.name = Demo App

- To specify the port on which you want to execute your application.
- If you set server.port = 0, then your application will be executed on random port.
- By default the port is set to 8080, if you don't specify any.
- Note that whatever port value you provide in vm arguments of running configurations's args will be given highest priority.
  server.port=8082


- properties to provide connection to mysql
	spring.datasource.url=jdbc:mysql://localhost:3306/springDemo
	spring.datasource.username=root
	spring.datasource.password=Sak@7890
	spring.jpa.database=mysql

- you may want to see how sql being generated by jpa looks like. for that you need to set below prop as true.
- By default this value is false.
	spring.jpa.show-sql=true

- below property enables swagger
	spring.mvc.pathmatch.matching-strategy=ant-path-matcher 

- way to explicitly provide logging level.By default spring boot enables info logging level. This is not recommended though.
	logging.level.root = debug

- specifying logging level for particular package
	logging.level.com.example.controller = trace

- specifying logging level for particular class
	logging.level.com.example.controller.StudentController = trace
	
- to create a log file. You can see all logs of console in this file.
- First thing is you need to have proper logging place lay inside your classes, controller or service.
- Then only you can check the logs so that you have idea where actually error or exception is happening.
- It helps to troubleshoot the issue.
	logging.file.name = app.log
	
- By default the logging file size is 10MB.
- At any point, if you want to increase the size of log file then you can set below property.
	logging.file.max-size 

- By default it is capturing the logs for the last seven days.

